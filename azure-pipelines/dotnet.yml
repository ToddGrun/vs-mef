steps:
# We use VSBuild instead of "dotnet build" on Windows where the MicroBuild IBCMerge task has to run.
- task: VSBuild@1
  displayName: ðŸ›  Build Visual Studio solution
  inputs:
    msbuildArgs: /t:build,pack /m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    platform: Any CPU
    configuration: $(BuildConfiguration)
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- script: dotnet build -t:build,pack --no-restore -c $(BuildConfiguration) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: ðŸ›  dotnet build
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

- powershell: azure-pipelines/dotnet-test-cloud.ps1 -Configuration $(BuildConfiguration) -Agent $(Agent.JobName) -PublishResults
  displayName: ðŸ§ª dotnet test

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: âš™ Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)"
  failOnStderr: true
  displayName: ðŸ“¢ Publish artifacts
  condition: succeededOrFailed()

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: ðŸ“¢ Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
